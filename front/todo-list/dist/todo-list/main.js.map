{"version":3,"sources":["./src/environments/environment.ts","./src/app/todo-modal/add-modal.component.ts","./src/app/todo-modal/add-modal.component.html","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/alerts/alerts.component.ts","./src/app/alerts/alerts.component.html","./src/app/todo-modal/done-modal.component.ts","./src/app/todo-modal/done-modal.component.html","./src/app/todo-modal/custom-validators.ts","./src/app/todo.service.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n  apiBaseUrl: 'http://localhost:3000'\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { Input, Output, EventEmitter, Component, TemplateRef, ViewChild } from '@angular/core';\r\nimport { Todo } from '../todo';\r\nimport { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\r\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\r\nimport { CustomValidators } from './custom-validators';\r\n\r\n@Component({\r\n  selector: 'add-modal',\r\n  templateUrl: './add-modal.component.html'\r\n})\r\nexport class AddModalComponent {\r\n  public todoForm: FormGroup;\r\n\r\n  closeResult?: string;\r\n\r\n  @Input() todo!: Todo;\r\n  @Output() addTodo = new EventEmitter<Todo>();\r\n  @ViewChild('addModal') addModal!: TemplateRef<any>;\r\n\r\n  // set the structure and validators for the todo form\r\n  constructor(private modalService: NgbModal, public fb: FormBuilder) {\r\n    this.todoForm = this.fb.group({\r\n      id: '',\r\n      what: ['', [Validators.required, Validators.maxLength(255)]],\r\n      category: ['', [Validators.required, Validators.maxLength(100)]],\r\n      who: ['', [Validators.required, Validators.maxLength(100)]],\r\n      whence: ['', [Validators.required, CustomValidators.todoDate]],\r\n      done: ['N', [Validators.required, Validators.maxLength(1), CustomValidators.yOrN]]\r\n    });\r\n  }\r\n\r\n  // reset the reactive form\r\n  resetForm(): void {\r\n    this.todoForm.reset();\r\n  }\r\n\r\n  // expose controls for reactive validation\r\n  get todoFormControl() {\r\n    return this.todoForm.controls;\r\n  }\r\n\r\n  // handle the add modal\r\n  public open(addModal: any) {\r\n\r\n    // open the modal and handle the result\r\n    this.modalService.open(addModal).result.then((result) => {\r\n      this.closeResult = result;\r\n\r\n      // make sure the Todo form is valid\r\n      if(this.todoForm.valid) {\r\n        // pass the todo values to the parent module to add\r\n        this.addTodo.emit(this.todoForm.value);\r\n\r\n        // reset the form for the next add action\r\n        this.resetForm();\r\n      }\r\n    }, (reason) => {\r\n      // edit modal dismissed\r\n      this.closeResult = reason;\r\n\r\n      // reset the form if cancel button pressed\r\n      if(reason == 'No add')\r\n        this.todoForm.reset();\r\n    });\r\n  }\r\n}\r\n","<button type=\"button\" class=\"btn btn-primary float-right\" data-toggle=\"modal\" (click)=\"open(addModal)\">TODO</button>\r\n\r\n<!-- Add Modal -->\r\n<ng-template #addModal let-modal>\r\n    <div class=\"modal-header\">\r\n       <h5 class=\"modal-title\" id=\"editModalLabel\">Add a new Todo</h5>\r\n       <button type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"modal.dismiss('Cross click')\">\r\n         <span aria-hidden=\"true\">&times;</span>\r\n       </button>\r\n    </div>\r\n    <div class=\"modal-body\">\r\n      <form [formGroup]=\"todoForm\">\r\n        <input type=\"hidden\" name=\"id\" class=\"form-control\" formControlName=\"id\" id=\"id\" placeholder=\"id\">\r\n\r\n        <div class=\"form-group\">\r\n          <label for=\"what\">What</label>\r\n          <input type=\"text\"name=\"what\" class=\"form-control\" formControlName=\"what\" id=\"what\" aria-describedby=\"what\" placeholder=\"THING\" required>\r\n          <span class=\"text-danger\"\r\n              *ngIf=\"(todoFormControl.what.touched && todoFormControl.what.errors?.required)\">\r\n              What are you doing??\r\n          </span>\r\n          <span class=\"text-danger\"\r\n              *ngIf=\"(todoFormControl.what.touched && todoFormControl.what.errors?.maxLength)\">\r\n              Max 255 characters - we pay by the pixel here!\r\n          </span>\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <label for=\"who\">Whomst</label>\r\n          <input type=\"text\" name=\"who\" class=\"form-control\" formControlName=\"who\" id=\"who\" placeholder=\"PERSON\">\r\n          <span class=\"text-danger\"\r\n              *ngIf=\"(todoFormControl.who.touched && todoFormControl.who.errors?.required)\">\r\n              WHOMST decrees it thus?\r\n          </span>\r\n          <span class=\"text-danger\"\r\n              *ngIf=\"(todoFormControl.who.touched && todoFormControl.who.errors?.maxLength)\">\r\n              Max 100 characters - if your name is longer than that you're just silly.\r\n          </span>\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <label for=\"whence\">Whence</label>\r\n          <input type=\"date\" name=\"whence\" class=\"form-control\" formControlName=\"whence\" id=\"whence\" placeholder=\"01/01/2022\">\r\n          <span class=\"text-danger\"\r\n              *ngIf=\"(todoFormControl.whence.touched && todoFormControl.whence.hasError('invalidDate'))\">\r\n              Unless this happens infinitely, please specify whence\r\n          </span>\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <label for=\"category\">Category</label>\r\n          <input type=\"text\" name=\"category\" class=\"form-control\" formControlName=\"category\" id=\"category\" placeholder=\"CLASSIFICATION\">\r\n          <span class=\"text-danger\"\r\n              *ngIf=\"(todoFormControl.category.touched && todoFormControl.category.errors?.required)\">\r\n              You want us to do WHAT? What even IS that?\r\n          </span>\r\n          <span class=\"text-danger\"\r\n              *ngIf=\"(todoFormControl.category.touched && todoFormControl.category.errors?.maxLength)\">\r\n              Max 100 characters - BE MORE CONCISE, SPIT IT OUT.\r\n          </span>\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <label for=\"done\">Done?</label>\r\n          <input type=\"text\" name=\"done\" class=\"form-control\" formControlName=\"done\" id=\"done\" placeholder=\"N\" value=\"N\">\r\n          <span class=\"text-danger\"\r\n              *ngIf=\"(todoFormControl.done.touched && todoFormControl.done.errors?.required)\">\r\n              Don't leave us in limbo like that, schrodinger.\r\n          </span>\r\n          <span class=\"text-danger\"\r\n              *ngIf=\"(todoFormControl.done.touched && todoFormControl.done.errors?.maxLength)\">\r\n              It only takes one character to put Y or N you weasel!\r\n          </span>\r\n          <span class=\"text-danger\"\r\n              *ngIf=\"(todoFormControl.done.touched && todoFormControl.done.hasError('invalidYOrN'))\">\r\n              Y or N pretty please\r\n          </span>\r\n        </div>\r\n\r\n\r\n      </form>\r\n    </div>\r\n    <div class=\"modal-footer\">\r\n      <button type=\"button\" class=\"btn btn-secondary\" (click)=\"modal.dismiss('No add')\">Fugeddaboutit</button>\r\n      <button type=\"button\" class=\"btn btn-primary\" (click)=\"modal.close('Yes click')\" [disabled]=\"!todoForm.valid\">AND SO WE SHALL</button>\r\n    </div>\r\n</ng-template>\r\n","import { AfterViewInit, Component, OnInit, ViewChild } from '@angular/core';\r\nimport { Todo } from './todo';\r\nimport { Alert } from './alerts/alert';\r\nimport { TodoService } from './todo.service';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { NgForm }   from '@angular/forms';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { Options } from '@angular-slider/ngx-slider';\r\nimport { NgbAlert } from '@ng-bootstrap/ng-bootstrap';\r\nimport { Subject } from 'rxjs';\r\n\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'TODO LIST';\r\n\r\n  // allTodos will keep track of the master list\r\n  public allTodos: Todo[] = [];\r\n  // filteredTodos will always be a subset of allTodos\r\n  public filteredTodos: Todo[] = [];\r\n\r\n  // bind an observable for use with the alert component\r\n  addAlert: Subject<Alert> = new Subject();\r\n\r\n  /*\r\n    ngx-slider options\r\n  */\r\n  // public minVal: number = 1900;\r\n  // public maxVal: number = 2100;\r\n  // sliderOptions: Options = {\r\n  //   floor: this.minVal,\r\n  //   ceil: this.maxVal,\r\n  //   showTicks: true\r\n  // };\r\n\r\n  /*\r\n    mat-table options\r\n  */\r\n  // configure mat-table column bindings\r\n  public todoAttributes: string[] = ['what', 'category', 'who', 'whence', 'done', 'created'];\r\n  // prepare the data source for mat-table\r\n  public dataSource =  new MatTableDataSource<Todo>();\r\n  // declare sorting functionality for the table rows\r\n  @ViewChild(MatSort) sort: any;\r\n\r\n\r\n\r\n  // inject a todo service into the module\r\n  constructor(private todoService: TodoService) {}\r\n\r\n  // get all todos on initialization of this module\r\n  ngOnInit() {\r\n    this.getTodos();\r\n  }\r\n\r\n\r\n  // load all todos from the todo service\r\n  public getTodos(): void {\r\n      this.todoService.getTodos().subscribe(\r\n        (res: Todo[]) => {\r\n          this.allTodos = res;\r\n          this.filteredTodos = this.allTodos;\r\n\r\n          // bind song data and sorting to the mat-table dataSource\r\n          this.dataSource.data = this.filteredTodos;\r\n          this.dataSource.sort = this.sort;\r\n\r\n          // bind song date range to the slider and reset filter\r\n          // const newOptions: Options = Object.assign({}, this.sliderOptions);\r\n          // newOptions.floor = Math.min(...this.filteredSongs.map(song => +song.release_date.slice(0,4)));\r\n          // newOptions.ceil = Math.max(...this.filteredSongs.map(song => +song.release_date.slice(0,4)));\r\n          //\r\n          // if(this.filteredSongs.length <= 2) {\r\n          //   newOptions.disabled = true;\r\n          //   newOptions.hideLimitLabels = true;\r\n          //   newOptions.hidePointerLabels = true;\r\n          // } else {\r\n          //   newOptions.disabled = false;\r\n          //   newOptions.hideLimitLabels = false;\r\n          //   newOptions.hidePointerLabels = false;\r\n          // // }\r\n          //\r\n          // this.sliderOptions = newOptions;\r\n          // this.minVal = newOptions.floor;\r\n          // this.maxVal = newOptions.ceil;\r\n\r\n\r\n        },\r\n        (err: HttpErrorResponse) => {\r\n          console.warn(err.message);\r\n          this.addAlert.next({\r\n            type: 'danger',\r\n            message: err.message,\r\n          });\r\n        }\r\n      );\r\n  }\r\n\r\n  public toggleDone(todo: Todo): void {\r\n    this.todoService.toggleDone(todo).subscribe(\r\n      (res: any) => {\r\n        console.log(res);\r\n        this.addAlert.next({\r\n          type: 'success',\r\n          message: res.message,\r\n        });\r\n        this.getTodos();\r\n      },\r\n      (err: HttpErrorResponse) => {\r\n        console.warn(err.message);\r\n        this.addAlert.next({\r\n          type: 'danger',\r\n          message: err.message,\r\n        });\r\n      }\r\n    );\r\n  }\r\n\r\n  // pass a new todo for the todo service to add\r\n  public addTodo(todo: Todo): void {\r\n    this.todoService.addTodo(todo).subscribe(\r\n      (res: any) => {\r\n        console.log(res);\r\n        this.addAlert.next({\r\n          type: 'success',\r\n          message: res.message,\r\n        });\r\n        this.getTodos();\r\n      },\r\n      (err: HttpErrorResponse) => {\r\n        console.warn(err.message);\r\n        this.addAlert.next({\r\n          type: 'danger',\r\n          message: err.message,\r\n        });\r\n      }\r\n    );\r\n  }\r\n\r\n  // pass a song for the song service to update\r\n  // public updateTodo(todo: Todo): void {\r\n  //   console.log(todo);\r\n  //   this.todoService.markDone(todo).subscribe(\r\n  //     (res: any) => {\r\n  //       console.log(res);\r\n  //       this.addAlert.next({\r\n  //         type: 'success',\r\n  //         message: res.message,\r\n  //       });\r\n  //       this.getTodos();\r\n  //     },\r\n  //     (err: HttpErrorResponse) => {\r\n  //       console.warn(err.message);\r\n  //       this.addAlert.next({\r\n  //         type: 'danger',\r\n  //         message: err.message,\r\n  //       });\r\n  //     }\r\n  //   );\r\n  // }\r\n  //\r\n  // // limit the rate of fire for filter updates\r\n  // public doFilter = this.throttle(() => this.filter());\r\n  //\r\n  // // filter the song table based on the release year\r\n  // public filter(): void {\r\n  //   this.filteredSongs = this.allSongs.filter((song) => {\r\n  //     let year = +song.release_date.slice(0,4);\r\n  //     return (year >= this.minVal && year <= this.maxVal) ? true : false;\r\n  //   });\r\n  //   this.dataSource.data = this.filteredSongs;\r\n  // }\r\n  //\r\n  // // throttle a function so it fires at most 5 times a second\r\n  // private throttle(func: any) {\r\n  //   var lastTime = 0;\r\n  //   return function () {\r\n  //       var now = new Date().getTime();\r\n  //       if (now - lastTime >= 200) {\r\n  //           func();\r\n  //           lastTime = now;\r\n  //       }\r\n  //   };\r\n  // }\r\n\r\n}\r\n","<div class=\"headerBar\">\r\n  <h1> {{title}} </h1>\r\n</div>\r\n\r\n\r\n\r\n<div class=\"container-fluid\">\r\n\r\n  <!--\r\n    Todo List Controls\r\n  -->\r\n  <div class=\"row\">\r\n      <app-alerts [newAlert]=\"addAlert\"></app-alerts>\r\n<!--\r\n      <div class=\"col col-lg-6 col-md-6 col-sm-6 justify-content-center align-self-center text-center\">\r\n        <div class=\"custom-slider\">\r\n          <ngx-slider [(value)]=\"minVal\" [(highValue)]=\"maxVal\" [options]=\"sliderOptions\" (userChangeEnd)=\"filter()\" (valueChange)=\"doFilter()\" (highValueChange)=\"doFilter()\"></ngx-slider>\r\n        </div>\r\n        <p>Filter todos by release year</p>\r\n      </div> -->\r\n\r\n      <div class=\"col col-lg-6 col-md-6 col-sm-6 justify-content-center align-self-center\">\r\n        <add-modal (addTodo)=\"addTodo($event)\"></add-modal>\r\n        <!-- <button type=\"button\" class=\"btn btn-secondary float-right\" (click)=\"saveList()\">Save List</button> -->\r\n      </div>\r\n  </div>\r\n\r\n  <hr/>\r\n\r\n  <!--\r\n    Todo List Table\r\n  -->\r\n  <table mat-table [dataSource]=\"dataSource\" class=\"mat-elevation-z8\" matSort>\r\n\r\n    <ng-container matColumnDef=\"actions\">\r\n      <th mat-header-cell *matHeaderCellDef>Actions</th>\r\n      <td mat-cell *matCellDef=\"let todo\">\r\n        <!-- <update-modal [todo]=\"todo\" (updateTodo)=\"updateTodo($event)\"></update-modal>\r\n        <delete-modal [todo]=\"todo\" (deleteTodo)=\"deleteTodo($event)\"></delete-modal> -->\r\n      </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"what\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>What</th>\r\n      <td mat-cell *matCellDef=\"let todo\"> {{todo.what}}</td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"category\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Category</th>\r\n      <td mat-cell *matCellDef=\"let todo\"> {{todo.category}} </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"who\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Whomst</th>\r\n      <td mat-cell *matCellDef=\"let todo\"> {{todo.who}} </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"whence\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Whence</th>\r\n      <td mat-cell *matCellDef=\"let todo\"> {{todo.whence | date: 'MM/dd/yyyy'}} </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"done\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Done?</th>\r\n      <td mat-cell *matCellDef=\"let todo\"> {{todo.done}}\r\n        <button type=\"button\" class=\"btn btn-sm btn-primary table-button\" data-toggle=\"modal\" (click)=\"toggleDone(todo)\">^</button>\r\n      </td>\r\n\r\n      <!-- (toggleDone)=\"toggleDone($event)\" -->\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"created\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Created</th>\r\n      <td mat-cell *matCellDef=\"let todo\"> {{todo.created | date: 'MM/dd/yyyy'}} </td>\r\n    </ng-container>\r\n\r\n    <tr mat-header-row *matHeaderRowDef=\"todoAttributes\"></tr>\r\n    <tr mat-row *matRowDef=\"let row; columns: todoAttributes;\"></tr>\r\n  </table>\r\n\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { AppComponent } from './app.component';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { ReactiveFormsModule  } from '@angular/forms';\r\nimport { MatTableModule } from '@angular/material/table'\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { NoopAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\r\n// import { DeleteModalComponent } from './song-modal/delete-modal.component';\r\n// import { UpdateModalComponent } from './song-modal/update-modal.component';\r\nimport { AddModalComponent } from './todo-modal/add-modal.component';\r\nimport { DoneModalComponent } from './todo-modal/done-modal.component';\r\n// import { NgxSliderModule } from '@angular-slider/ngx-slider';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { AlertsComponent } from './alerts/alerts.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    // DeleteModalComponent,\r\n    // UpdateModalComponent,\r\n    AddModalComponent,\r\n    DoneModalComponent,\r\n    AlertsComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    HttpClientModule,\r\n    ReactiveFormsModule,\r\n    NoopAnimationsModule,\r\n    MatTableModule,\r\n    MatSortModule,\r\n    NgbModule,\r\n    // NgxSliderModule,\r\n    FontAwesomeModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { Input } from '@angular/core';\r\nimport { Alert } from './alert';\r\n\r\n@Component({\r\n  selector: 'app-alerts',\r\n  templateUrl: './alerts.component.html',\r\n  styleUrls: ['./alerts.component.css']\r\n})\r\nexport class AlertsComponent implements OnInit {\r\n\r\n  alerts: Alert[] = [];\r\n\r\n  @Input() newAlert: Subject<Alert> = new Subject<Alert>();\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n\r\n    // on receipt of a new alert,\r\n    //  add it to the array of alerts and schedule its removal\r\n    this.newAlert.subscribe((alert: Alert) => {\r\n      this.alerts.push(alert);\r\n      setTimeout(() => this.close(alert), 3500);\r\n    })\r\n  }\r\n\r\n  // remove the given alert from the array of alerts\r\n  close(alert: Alert) {\r\n    this.alerts.splice(this.alerts.indexOf(alert), 1);\r\n  }\r\n\r\n}\r\n","<div class=\"alert-messages\">\r\n  <p *ngFor=\"let alert of alerts\">\r\n    <ngb-alert [type]=\"alert.type\" (closed)=\"close(alert)\">{{ alert.message }}</ngb-alert>\r\n  </p>\r\n</div>\r\n","import { Input, Output, EventEmitter, Component, TemplateRef, ViewChild } from '@angular/core';\r\nimport { Todo } from '../todo';\r\nimport { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\r\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\r\nimport { CustomValidators } from './custom-validators';\r\nimport { faEdit } from '@fortawesome/free-solid-svg-icons';\r\n\r\n@Component({\r\n  selector: 'done-modal',\r\n  templateUrl: './done-modal.component.html'\r\n})\r\nexport class DoneModalComponent {\r\n  // public todoForm: FormGroup;\r\n\r\n  // closeResult?: string;\r\n\r\n  @Input() todo!: Todo;\r\n  @Output() doneTodo = new EventEmitter<Todo>();\r\n  // @ViewChild('editModal') doneModal!: TemplateRef<any>;\r\n\r\n  faEdit = faEdit;\r\n\r\n  // set the structure and validators for the todo form\r\n  constructor(private modalService: NgbModal, public fb: FormBuilder) {\r\n    // this.todoForm = this.fb.group({\r\n    //   id: '',\r\n    //   done: ['N', [Validators.required, Validators.maxLength(1), CustomValidators.yOrN]]\r\n    // });\r\n  }\r\n\r\n  // expose controls for reactive validation\r\n  // get todoFormControl() {\r\n  //   return this.todoForm.controls;\r\n  // }\r\n\r\n  public toggleDone() {\r\n    console.log('boop', this);\r\n    // this.doneTodo.emit(this.value);\r\n  }\r\n\r\n  // // handle the done modal\r\n  // public open(editModal: any) {\r\n  //\r\n  //   // bind the current todo to the form\r\n  //   this.todoForm.patchValue(this.todo);\r\n  //\r\n  //   // open the modal and handle the result\r\n  //   this.modalService.open(editModal).result.then((result) => {\r\n  //     this.closeResult = result;\r\n  //\r\n  //     // make sure the Todo form is valid\r\n  //     if(this.todoForm.valid) {\r\n  //       // pass the todo values to the parent module to done\r\n  //       this.doneTodo.emit(this.todoForm.value);\r\n  //     }\r\n  //   }, (reason) => {\r\n  //     // edit modal dismissed\r\n  //     this.closeResult = reason;\r\n  //   });\r\n  // }\r\n}\r\n","<button type=\"button\" class=\"btn btn-sm btn-primary table-button\" data-toggle=\"modal\" (click)=\"toggleDone()\"><fa-icon [icon]=\"faEdit\"></fa-icon></button>\r\n\r\n<!-- Edit Modal -->\r\n<!-- <ng-template #doneModal let-modal>\r\n    <div class=\"modal-header\">\r\n       <h5 class=\"modal-title\" id=\"doneModalLabel\">Edit {{song.title}}</h5>\r\n       <button type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"modal.dismiss('Cross click')\">\r\n         <span aria-hidden=\"true\">&times;</span>\r\n       </button>\r\n    </div>\r\n    <div class=\"modal-body\">\r\n      <form [formGroup]=\"songForm\">\r\n        <input type=\"hidden\" name=\"id\" class=\"form-control\" formControlName=\"id\" id=\"id\" placeholder=\"id\">\r\n        <div class=\"form-group\">\r\n          <label for=\"title\">Title</label>\r\n          <input type=\"text\"name=\"title\" class=\"form-control\" formControlName=\"title\" id=\"title\" aria-describedby=\"title\" placeholder=\"Title\" required>\r\n          <span class=\"text-danger\"\r\n              *ngIf=\"(songFormControl.title.touched && songFormControl.title.errors?.required)\">\r\n              Song Title is required\r\n          </span>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"artist\">Artist</label>\r\n          <input type=\"text\" name=\"artist\" class=\"form-control\" formControlName=\"artist\" id=\"artist\" placeholder=\"Artist\">\r\n          <span class=\"text-danger\"\r\n              *ngIf=\"(songFormControl.artist.touched && songFormControl.artist.errors?.required)\">\r\n              Artist is required\r\n          </span>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"date\">Release Date</label>\r\n          <input type=\"date\" name=\"date\" class=\"form-control\" formControlName=\"release_date\" id=\"date\" placeholder=\"01/01/2001\">\r\n          <span class=\"text-danger\"\r\n              *ngIf=\"(songFormControl.release_date.touched && songFormControl.release_date.hasError('invalidDate'))\">\r\n              A valid date is required\r\n          </span>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"price\">Price</label>\r\n          <input type=\"number\" name=\"price\" class=\"form-control\" formControlName=\"price\" id=\"price\" placeholder=\"Price\">\r\n          <span class=\"text-danger\"\r\n              *ngIf=\"(songFormControl.price.touched && songFormControl.price.errors?.required)\">\r\n              Price is required\r\n          </span>\r\n          <span class=\"text-danger\"\r\n              *ngIf=\"(songFormControl.price.touched && songFormControl.price.errors?.min)\">\r\n              Price cannot be less than 0\r\n          </span>\r\n          <span class=\"text-danger\"\r\n              *ngIf=\"(songFormControl.price.touched && songFormControl.price.errors?.max)\">\r\n              Price cannot be more than 1,000,000\r\n          </span>\r\n        </div>\r\n      </form>\r\n    </div>\r\n    <div class=\"modal-footer\">\r\n      <button type=\"button\" class=\"btn btn-secondary\" (click)=\"modal.dismiss('No update')\">Cancel</button>\r\n      <button type=\"button\" class=\"btn btn-primary\" (click)=\"modal.close('Yes click')\" [disabled]=\"!songForm.valid\">Submit</button>\r\n    </div>\r\n</ng-template> -->\r\n","import { FormControl, ValidationErrors } from '@angular/forms';\r\n\r\nexport class CustomValidators {\r\n\r\n  static yOrN(control: FormControl): ValidationErrors | null {\r\n    if(!control || control.value === null) return null;\r\n\r\n    if(control.value != 'Y' && control.value != 'N' && control.value != 'y' && control.value != 'n') {\r\n      return { \"invalidYOrN\": true };\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  // simply check the datepicker format matches digits in YYYY-DD-MM\r\n  static todoDate(control: FormControl): ValidationErrors | null {\r\n    let DatePattern = /^\\d{4}[./-]\\d{2}[./-]\\d{2}$/g;\r\n\r\n    if(!control || control.value === null) return null;\r\n\r\n    if (!control.value.match(DatePattern)) {\r\n     return { \"invalidDate\": true };\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n","import { Observable } from 'rxjs';\r\nimport { Todo } from './todo';\r\nimport { Response } from './response';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n/*\r\n  Service for making requests to the backend Todo API\r\n*/\r\nexport class TodoService {\r\n  private apiServerUrl = environment.apiBaseUrl;\r\n\r\n  // inject an httpclient into the todo service constructor\r\n  constructor(private http: HttpClient) {}\r\n\r\n  // get an array of todos\r\n  public getTodos(): Observable<Todo[]> {\r\n    return this.http.get<Todo[]>(`${this.apiServerUrl}/getAllTodos`);\r\n  }\r\n\r\n  // post a new todo to the back end\r\n  public addTodo(todo: Todo): Observable<Response> {\r\n    return this.http.post<Response>(`${this.apiServerUrl}/addTodo`, todo);\r\n  }\r\n\r\n  // put updates for a todo to the back end\r\n  public toggleDone(todo: Todo): Observable<Response> {\r\n    return this.http.put<Response>(`${this.apiServerUrl}/markDone`, todo);\r\n  }\r\n}\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}